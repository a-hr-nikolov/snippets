{
  // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Name guard": {
    "prefix": "ifmain",
    "body": [
      "if __name__ == '__main__':",
      "    main()"
    ],
    "description": "Snippet for if __name__ == '__main__'"
  },
  "Super init": {
    "prefix": "supinit",
    "body": [
      "def __init__(self,$1 *args, **kwargs) -> None:",
      "    super().__init__($2*args, **kwargs)"
    ],
    "description": "__init__ with super()"
  },
  "Regular init": {
    "prefix": "reginit",
    "body": [
      "def __init__(self) -> None:",
      "    pass"
    ],
    "description": "def __init__(self)"
  },
  "NotImplementedError": {
    "prefix": "notimp",
    "body": [
      "raise NotImplementedError"
    ],
    "description": "Use to raise a NonImplementedError Quickly"
  }
}
