{
  // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  // ===================================================================================
  // ERRORS
  // ===================================================================================
  "Return on error": {
    "prefix": "ier",
    "body": [
      "if err != nil {",
      "    $1",
      "}$0"
    ]
  },
  "Return on error": {
    "prefix": "ire",
    "body": [
      "if err != nil {",
      "    return ${1:err}",
      "}$0"
    ]
  },
  "Return on error with format wrap": {
    "prefix": "iref",
    "body": [
      "if err != nil {",
      "    return fmt.Errorf(\"${1:error}: %w\", err)",
      "}$0"
    ]
  },
  "Return val, err on error": {
    "prefix": "irne",
    "body": [
      "if err != nil {",
      "    return ${1:nil}, err",
      "}$0"
    ]
  },
  "Return val, err on error with format wrap": {
    "prefix": "irnef",
    "body": [
      "if err != nil {",
      "    return ${2:nil}, fmt.Errorf(\"${1:error}: %w\", err)",
      "}$0"
    ]
  },
  "Log on error": {
    "prefix": "ilpe",
    "body": [
      "if err != nil {",
      "    log.Printf(\"${1:error}: %v\", err)",
      "}$0"
    ]
  },
  "Exit on error": {
    "prefix": "ilfexit",
    "body": [
      "if err != nil {",
      "    log.Fatalf(\"${1:error}: %v\", err)",
      "}$0"
    ]
  },
  // ===================================================================================
  // RETURNS
  // ===================================================================================
  "return nil": {
    "prefix": "rn",
    "body": "return nil"
  },
  "return err": {
    "prefix": "re",
    "body": "return ${1:err}"
  },
  "return err format wrap": {
    "prefix": "ref",
    "body": "return fmt.Errorf(\"${1:error}: %w\", err)$0"
  },
  "return nil, err": {
    "prefix": "rne",
    "body": "return nil, err"
  },
  "return nil, err format wrap": {
    "prefix": "rnef",
    "body": "return ${2:nil}, fmt.Errorf(\"${1:error}: %w\", err)$0"
  },
  // ===================================================================================
  // FORMATTING
  // ===================================================================================
  "fmt.Sprintf()": {
    "prefix": "fms",
    "body": "fmt.Sprintf(\"$1\",$2)$0"
  },
  "fmt.Errorf()": {
    "prefix": "fme",
    "body": "fmt.Errorf(\"$1\",$2)$0"
  },
  "fmt.Printf()": {
    "prefix": "fmp",
    "body": "fmt.Printf(\"$1\",$2)$0"
  },
  "fmt.Println()": {
    "prefix": "fmpl",
    "body": "fmt.Println($1)$0"
  },
  // ===================================================================================
  // LOGS
  // ===================================================================================
  "log any": {
    "prefix": "lo",
    "body": "log.Printf(\"$1: %+v\", ${2:val})$0"
  },
  "log err": {
    "prefix": "le",
    "body": "log.Printf(\"$1: %+v\", err$2)$0"
  },
  "log fatal": {
    "prefix": "lf",
    "body": "log.Fatal(err$1)$0"
  },
  "log fatalf": {
    "prefix": "lff",
    "body": "log.Fatalf(\"$1: %+v\", err$1)$0"
  },
  "return nil, err format wrap": {
    "prefix": "rnef",
    "body": "return ${2:nil}, fmt.Errorf(\"${1:error}: %w\", err)$0"
  },
  // ===================================================================================
  // CONTROL FLOW
  // ===================================================================================
  "For _, v range on values": {
    "prefix": "frv",
    "body": [
      "for _, ${1:v} := range ${2:values} {",
      "    $0",
      "}"
    ]
  },
  "For k, v range on values": {
    "prefix": "frkv",
    "body": [
      "for ${1:k}, ${2:v} := range ${2:values} {",
      "    $0",
      "}"
    ]
  },
  "for full": {
    "prefix": "frf",
    "body": [
      "for ${1:i} := 0; $1 < ${2:count}; $1${3:++} {",
      "    $0",
      "}"
    ]
  },
  "switch case": {
    "prefix": "swc",
    "body": [
      "switch$1 {",
      "case $2:",
      "    $0",
      "}"
    ]
  },
  "select case": {
    "prefix": "slc",
    "body": [
      "select {",
      "case $1:",
      "    $0",
      "}"
    ]
  },
  "case clause": {
    "prefix": "cs",
    "body": "case ${1:condition}:$0"
  },
  "lock unlock": {
    "prefix": "lok",
    "body": [
      "mu.Lock()",
      "defer mu.Unlock()"
    ]
  },
  // ===================================================================================
  // MISC
  // ===================================================================================
  "ctx := context.Background()": {
    "prefix": "ctxb",
    "body": "ctx := context.Background()"
  },
  "ctx := context.TODO()": {
    "prefix": "ctxt",
    "body": "fmt.Sprintf(\"$1\",$2)$0"
  },
  "append to slice": {
    "prefix": "ap",
    "body": "${1:slice} = append(${1:slice}, $2)$0"
  },
  "map declaration": {
    "prefix": "map",
    "body": "map[${1:type}]${2:type}"
  },
  // ===================================================================================
  // TYPES
  // ===================================================================================
  "type Struct struct": {
    "prefix": "tys",
    "body": [
      "type ${1:stName} struct {",
      "    $2",
      "}$0"
    ]
  },
  "`json:field`": {
    "prefix": "stj",
    "body": "`json:\"$1\"`$0"
  },
  "type Interface interface": {
    "prefix": "tyi",
    "body": [
      "type ${1:ifName} interface {",
      "    $2",
      "}$0"
    ]
  },
  "func NewStruct() *Struct": {
    "prefix": "ne",
    "body": [
      "func New${1:St}() *${1:St}{",
      "    ${2:structPtr} := &${1:St}{}",
      "    $3",
      "    return ${2:structPtr}",
      "}$0"
    ]
  },
  // ===================================================================================
  // FUNCTIONS
  // ===================================================================================
  "package main and main function": {
    "prefix": "pkgm",
    "body": [
      "package main",
      "",
      "func main() {",
      "    $0",
      "}"
    ]
  },
  "function declaration": {
    "prefix": "fn",
    "body": [
      "func $1($2) $3 {",
      "    $0",
      "}"
    ]
  },
  "method declaration": {
    "prefix": "meth",
    "body": [
      "func (${1:receiver} ${2:type}) ${3:method}($4) $5 {",
      "    $0",
      "}"
    ]
  },
  "main function": {
    "prefix": "fmain",
    "body": [
      "func main() {",
      "    $1",
      "}"
    ]
  },
  "defer IIFE": {
    "prefix": "defun",
    "body": [
      "defer func() {",
      "    if err := $1; err != nil {",
      "        log.Println(\"could not close:\", err)",
      "    }",
      "}()$0"
    ]
  },
  "gofunc IIFE": {
    "prefix": "gofun",
    "body": [
      "go func($1) {",
      "    $2",
      "}($3)$0"
    ]
  },
  // ===================================================================================
  // HTTP
  // ===================================================================================
  "http ResponseWriter *Request": {
    "prefix": "wr",
    "body": [
      "${1:w} http.ResponseWriter, ${2:r} *http.Request"
    ]
  },
  "http.HandleFunc": {
    "prefix": "hfunc",
    "body": [
      "${1:http}.HandleFunc(\"${2:/}\", ${3:handler})"
    ]
  },
  "http handler declaration": {
    "prefix": "fhand",
    "body": [
      "func $1(${2:w} http.ResponseWriter, ${3:r} *http.Request) {",
      "    $0",
      "}"
    ]
  },
  "http.Redirect": {
    "prefix": "rd",
    "body": [
      "http.Redirect(${1:w}, ${2:r}, \"${3:/}\", ${4:http.StatusFound})"
    ]
  },
  "http.Error": {
    "prefix": "herr",
    "body": [
      "http.Error(${1:w}, ${2:err}.Error(), ${3:http.StatusInternalServerError})"
    ]
  },
  "http.ListenAndServe": {
    "prefix": "las",
    "body": [
      "http.ListenAndServe(\"${1::8080}\", ${2:nil})"
    ]
  },
  "http.Serve": {
    "prefix": "sv",
    "body": [
      "http.Serve(\"${1::8080}\", ${2:nil})"
    ]
  },
  // ===================================================================================
  // TESTING
  // ===================================================================================
  "table driven test": {
    "prefix": "tdt",
    "body": [
      "func Test$1(t *testing.T) {",
      "    testCases := []struct {",
      "        desc    string",
      "        $2",
      "    }{",
      "        {",
      "            desc: \"$3\",",
      "            $4",
      "        },",
      "    }",
      "    for _, tC := range testCases {",
      "        t.Run(tC.desc, func(t *testing.T) {",
      "            $0",
      "        })",
      "    }",
      "}"
    ]
  },
  "test function": {
    "prefix": "tf",
    "body": [
      "func Test$1(t *testing.T) {",
      "    $0",
      "}"
    ]
  },
  "benchmark function": {
    "prefix": "bf",
    "body": [
      "func Benchmark$1(b *testing.B) {",
      "    for b.Loop() {",
      "        $0",
      "    }",
      "}"
    ]
  },
  "benchmark function old style": {
    "prefix": "bfo",
    "body": [
      "func Benchmark$1(b *testing.B) {",
      "    for ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {",
      "        $0",
      "    }",
      "}"
    ]
  },
  "example function": {
    "prefix": "ef",
    "body": [
      "func Example$1() {",
      "    $2",
      "    //Output:",
      "    $3",
      "}"
    ]
  }
}
